@page
@model TheAgooProjectWeb.Pages.Portal.Annual_MasterModel
@{
    ViewData["Title"] = "Class Annual Master Result";
    int sn = 0;
    string[] _terms = ["First", "Second", "Third"];
    var highlow = new List<TheAgooProjectWeb.Pages.Portal.Annual_MasterModel.HighLow>();
    var dcounter = new List<TheAgooProjectWeb.Pages.Portal.Annual_MasterModel.D_Count>();
    if (Model._subjects.Count() > 0)
    {
        foreach (var item in Model._resultSummary.OrderByDescending(l => l.SubId).GroupBy(g => g.SubId))
        {
            var _highlow = new TheAgooProjectWeb.Pages.Portal.Annual_MasterModel.HighLow();
            foreach (var item1 in item)
            {
                _highlow.TotalScore += item1.TotalScore;
            }
            highlow.Add(_highlow);
        }
    }
}
<div class="page-content">
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between">
                <div class="badge  badge-info bg-info text-uppercase"><strong class="h5">Annual Result Master Sheet</strong></div>
                <a class="btn btn-dark btn-sm" asp-page="Index"><i class="fa fa-arrow-left"></i>&ensp; Back</a>
            </div>
            @if (TempData["error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show mb-2 mt-2" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <strong><i class="fas fa-exclamation-triangle"></i> </strong> @TempData["error"].
                </div>
            }
            <div class="row p-2"> 
                <div class="col-md-10">
                    <form method="post">
                        <div class="form-row align-items-center">
                            <div class="col-auto">
                                <div class="mt-3 mr-sm-2">
                                    <label class="sr-only" for="inlineFormInput">Session/Year</label>
                                    <select class="form-control form-control-sm" asp-for="CTSSClass.SessionYear" asp-items="Model.ViewSelectModel.SessionYearz">
                                        <option value="" disabled selected>---Select Session/Year---</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="mt-3 mr-sm-2">
                                    <label class="sr-only" for="inlineFormInput">Class</label>
                                    <select class="form-control form-control-sm " asp-for="CTSSClass.Classes" asp-items="Model.ViewSelectModel.Class">
                                        <option value="" disabled selected>---Select Class---</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="mt-3 mr-sm-2">
                                    <label class="sr-only" for="inlineFormInput">Sub Class</label>
                                    <select asp-for="CTSSClass.Subclass" class="form-control form-control-sm" asp-items="Model.ViewSelectModel.SubClass">
                                        <option value="" disabled selected>---Select Sub-Class---</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-auto">
                                <button type="submit" class="btn btn-sm btn-primary mt-3"><i class="fas fa-search"></i></button>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="col-md-2">
                    <button class="btn-success btn mt-2" type="button" id="getexcel"><i class="far fa-file-excel"></i>&nbsp; Export excel</button>
                </div>
            </div>
        </div>
        @if(Model._subjects.Count()>0)
        {
        <div class="card-body">
            <table class="table-bordered table table-responsive">
                <thead class="text-center table-info">
                    <tr>
                        <th colspan="3" rowspan="2">SUBJECT</th>
                        @foreach (var item in Model._subjects.OrderByDescending(l=>l.Subid))
                        {
                            <th colspan="3">@item.SubjectName</th>
                        }
                            <th rowspan="3" class="rotate-upward">Annual Total</th>
                            <th rowspan="3" class="rotate-upward">Annual Average</th>
                            <th rowspan="3" class="rotate-upward">Annual Position</th>
                            <th rowspan="3" class="rotate-upward">Grade</th>
                        <th rowspan="3">Remark</th>
                        <th rowspan="3">Action</th>
                    </tr>
                    <tr>
                        @foreach (var item in Model._subjects.OrderByDescending(l => l.Subid))
                        {
                            <th colspan="3">Period</th>
                        }
                    </tr>
                    <tr>
                        <th>S/N</th>
                        <th>Full Name</th>
                        <th>Sex</th>
                        @foreach (var item in Model._subjects.OrderByDescending(l => l.Subid))
                        {
                            <th>1<sup>st</sup></th>
                            <th>2<sup>nd</sup></th>
                            <th>3<sup>rd</sup></th>
                        }
                        @* <th>850</th>
                        <th>68.12%</th>
                        <th>2<sup>nd</sup></th>
                        <th>A</th>
                        <th>Excellent</th> *@

                    </tr>
                </thead>
                <tbody class="table-bordered border-primary">
                    @foreach (var item in Model.Results.GroupBy(k=>k.Termregistration.StudentId))
                    {
                            int termcount = item.Select(g => new TermRegistration { }).Where(j => j.Id == item.FirstOrDefault().Termregistration.StudentId && j.SessionYearId == item.FirstOrDefault().Termregistration.SessionYearId).Count();
                            int term = 0;
                            double? totalscores = 0;
                            sn++;
                            <tr class="">
                                <td>@(sn)</td>
                                <td>@(item.FirstOrDefault().Termregistration.StudentsData.SurName + " " +
                                    item.FirstOrDefault().Termregistration.StudentsData.OtherName + " " +
                                    item.FirstOrDefault().Termregistration.StudentsData.FirstName)</td>
                                <td>@(item.FirstOrDefault().Termregistration.StudentsData.Gender)</td>
                                 
                                  @foreach (var item2 in Model._subjects.OrderByDescending(l=>l.Subid))
                                {
                                    var first = item.FirstOrDefault(k => k.SubjectId == item2.Subid && k.Termregistration.Term == "First");
                                    if (first == null)
                                    {
                                        <td>0</td>
                                    }
                                    else
                                    {
                                        totalscores += first.Total;
                                        term++;
                                        <td>@(first.Total)</td>
                                    }
                                    var second = item.FirstOrDefault(k => k.SubjectId == item2.Subid && k.Termregistration.Term == "Second");
                                    if (second == null)
                                    {
                                        <td>0</td>
                                    }
                                    else
                                    {
                                        term++;
                                        totalscores += second.Total;
                                        <td>@(second.Total)</td>
                                    }
                                    var third = item.FirstOrDefault(k => k.SubjectId == item2.Subid && k.Termregistration.Term == "Third");
                                    if (third == null)
                                    {
                                        <td>0</td>
                                    }
                                    else
                                    {
                                        term++;
                                        totalscores += third.Total;
                                        <td>@(third.Total)</td>
                                    }
                                }
                                
                                <td>@(totalscores)</td>
                                <th>@SD.AnnualAverage((double)totalscores, Model.Results.Where(k => k.TermRegId == item.FirstOrDefault().Termregistration.Id).Count())</th>
                                <th>@(Model._studentscore.FirstOrDefault(g => g.StudId == item.FirstOrDefault().Termregistration.StudentId).Rank)<sup>@(SD.specialNumber(Model._studentscore.FirstOrDefault(g => g.StudId == item.FirstOrDefault().Termregistration.StudentId).Rank))</sup></th>
                                <th>@(SD.Annual_Calculate_Grade(totalscores ?? 0, termcount))</th>
                                <th>@(SD.Annual_Calculate_Remark(totalscores ?? 0, termcount))</th>
                                <th><a class="btn btn-success" asp-page="Annual-Result" asp-route-studentid="@item.FirstOrDefault().Termregistration.StudentId" asp-route-session="@item.FirstOrDefault().Termregistration.SessionYearId"><i class="fas fa-eye"></i></a></th>
                            </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                            <td colspan="3" class="">TERMLY SUBJECT AVERAGE MARK</td>
                        @foreach (var item in Model._subjects.OrderByDescending(l => l.Subid).ToList())
                        {
                                <td>@{
                                        var FirstScores = Model._resultSummary.FirstOrDefault(k => k.SubId == item.Subid && k.Term == "First")?.TotalScore ?? 0;
                                        var firstNoInClass = Model.Results.Where(j => j.Termregistration.Term == "First" && j.SubjectId == item.Subid).GroupBy(h => h.Termregistration.StudentId).Count();
                                    }
                                    @SD.AnnualTermAverage(firstNoInClass, FirstScores)%
                                </td>
                                <td>
                                    @{
                                        var SecondScores = Model._resultSummary.FirstOrDefault(k => k.SubId == item.Subid && k.Term == "Second")?.TotalScore ?? 0;
                                        var secondNoInClass = Model.Results.Where(j => j.Termregistration.Term == "Second" && j.SubjectId == item.Subid).GroupBy(h => h.Termregistration.StudentId).Count();
                                    }
                                    @SD.AnnualTermAverage(secondNoInClass, SecondScores)%
                                </td>
                                <td>
                                    @{
                                        var ThirdScores = Model._resultSummary.FirstOrDefault(k => k.SubId == item.Subid && k.Term == "Third")?.TotalScore ?? 0;
                                        var thirdNoInClass = Model.Results.Where(j => j.Termregistration.Term == "Third" && j.SubjectId== item.Subid).GroupBy(h => h.Termregistration.StudentId).Count();
                                    }
                                    @SD.AnnualTermAverage(thirdNoInClass, ThirdScores)%
                                </td>
                            @* <td>@(Model._resultSummary.FirstOrDefault(k => k.SubId == item.Subid && k.Term == "Second")?.TotalScore ?? 0)</td>
                            <td>@(Model._resultSummary.FirstOrDefault(k => k.SubId == item.Subid && k.Term == "Third")?.TotalScore ?? 0)</td> *@
                        }
                    </tr>
                    <tr class="text-center">
                            <td colspan="3" class="">ANNUAL SUBJECT AVERAGE MARK</td>
                            @foreach (var item in Model._resultSummary.OrderByDescending(m => m.SubId).GroupBy(k => k.SubId))
                        {
                            int maxtTerm = 0;
                            double scores = 0;
                            var Firster = Model.Results.Where(j => j.Termregistration.Term == "First" && j.SubjectId == item.FirstOrDefault().SubId).GroupBy(h => h.Termregistration.StudentId).Count();
                            if(Firster>0){ maxtTerm++; }    
                            var Seconder = Model.Results.Where(j => j.Termregistration.Term == "Second" && j.SubjectId == item.FirstOrDefault().SubId).GroupBy(h => h.Termregistration.StudentId).Count();
                            if (Seconder > 0) { maxtTerm++; }
                            var Thirder = Model.Results.Where(j => j.Termregistration.Term == "Third" && j.SubjectId == item.FirstOrDefault().SubId).GroupBy(h => h.Termregistration.StudentId).Count();
                            if (Thirder > 0) { maxtTerm++; }
                            foreach (var item2 in item)
                            {
                                scores += item2.TotalScore;//08136899959 Priase
                            }
                                <td colspan="3">@(SD.AnnualTermAverage(maxtTerm,scores))</td>
                        }
                    </tr>
                    <tr class="text-center">
                        <td colspan="3" class="">HIGHEST ANNUAL MARK IN CLASS</td>
                            @foreach (var item in Model._subjects.OrderByDescending(l => l.Subid))
                            {
                                <td colspan="3">@(Model._resultSummary2.Where(k=>k.SubId==item.Subid).Max(k => k.TotalScore))</td>
                            }
                    </tr>
                    <tr class="text-center">
                            <td colspan="3" class="">LOWEST ANNUAL MARK IN CLASS</td>
                        @foreach (var item in Model._subjects.OrderByDescending(l => l.Subid))
                        {
                                <td colspan="3">@(Model._resultSummary2.Where(k => k.SubId == item.Subid).Min(k => k.TotalScore))</td>
                        }
                    </tr>
                </tfoot>
            </table>
        </div>
        }
    </div>
</div>